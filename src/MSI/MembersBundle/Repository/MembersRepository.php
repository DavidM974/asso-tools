<?php

namespace MSI\MembersBundle\Repository;

use Doctrine\ORM\EntityRepository;


/**
 * MembersRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MembersRepository extends EntityRepository {

    public function findMembersByParametres($data) {
        $query = $this->createQueryBuilder('m');
        
        if (!empty($data['services']->toArray())) {

            $tab = $data['services']->toArray();

            $idServices = Array();
            foreach ($tab as $service) {
                $idServices[] = $service->getId();
            }
            $query->innerJoin('m.services', 's', 'WITH', 's.id IN (:services)')
                    ->setParameter('services', $idServices);
        }
        
        if ($data['firstname'] != '') {
            $query->andWhere('m.firstname LIKE :firstname')
                    ->setParameter('firstname', '%' . $data['firstname'] . '%');
        }
        if ($data['lastname'] != '') {
            $query->andWhere('m.lastname LIKE :lastname')
                    ->setParameter('lastname', '%' . $data['lastname'] . '%');
        }
        if ($data['email'] != '') {
            $query->andWhere('m.email LIKE :email')
                    ->setParameter('email', '%' . $data['email'] . '%');
        }
        if ($data['zipcode'] != '') {
            // this field is still not field voir pour un join avec city et zipcode
            $query->orWhere('m.zipcode = :zipcode')
                    ->setParameter('zipcode', $data['zipcode']);
        }
        if ($data['address'] != '') {
            $query->andWhere('m.address LIKE :address')
                    ->setParameter('address', '%' . $data['address'] . '%');
        }
        if ($data['phone'] != '') {
            $query->andWhere('m.phone = :phone')
                    ->setParameter('phone', $data['phone']);
        }
        if ($data['mobile'] != '') {
            $query->andWhere('m.mobile = :mobile')
                    ->setParameter('mobile', $data['mobile']);
        }
        if (!empty($data['familySituation'])) {
            $query->andWhere('m.familySituation IN (:familySituation)')
                    ->setParameter('familySituation', $data['familySituation']);
        }

        if ($data['sex'] !== 'ALL'){
            if ($data['sex'] == 1)
                $query->orWhere('m.sex = 1');
            else
             $query->orWhere('m.sex = 0');
        }
        if ($data['city'] != null) {
            $query->andWhere('m.city IN (:city)')
                    ->setParameter('city', $data['city']->getId());
        }
        if ($data['activeMember'] != 'ALL') {
            if ($data['activeMember'] == 'YES') {
                $query->andWhere('m.isActive = 0 ');
            }
            if ($data['activeMember'] == 'NO') {
                $query->andWhere('m.isActive IS NULL or m.isActive = 0');
            }
        }

        if ($data['age_start'] != '0' or $data['age_end'] != '100') {

            $date_debut = new \DateTime();
            $date_debut->sub(new \DateInterval('P' . $data['age_start'] . 'Y'));
            $dateDebutSql = $date_debut->format('Y-m-d');
            $date_fin = new \DateTime();
            $date_fin->sub(new \DateInterval('P' . $data['age_end'] . 'Y'));
            $dateFinSql = $date_fin->format('Y-m-d');
            
            $query->andWhere('m.birth BETWEEN :dateDebut AND :dateFin')
                    ->setParameter('dateDebut', $dateFinSql)
                    ->setParameter('dateFin', $dateDebutSql);
        }
        if (!empty($data['professional_social_category']->toArray())) {

            $tab = $data['professional_social_category']->toArray();
            $idPsc = Array();
            foreach ($tab as $psc) {
                $idPsc[] = $psc->getId();
            }
            $query->andWhere('m.professional_social_category IN (:professional_social_category)')
                    ->setParameter('professional_social_category', $idPsc);
        }
        if ($data['date_debut'] != null && $data['date_fin'] != null) {

            $query->andWhere('m.first_register_date BETWEEN :dateDebut AND :dateFin')
                    ->setParameter('dateDebut', $data['date_debut'])
                    ->setParameter('dateFin', $data['date_fin']);
        }

        if ($data['baptised'] != 'ALL') {
            if ($data['baptised'] == 'YES') {
                $query->andWhere('m.baptism_date IS NOT NULL');
            }
            if ($data['baptised'] == 'NO') {
                $query->andWhere('m.baptism_date IS NULL ');
            }
        }
        return $query->getQuery()->getResult();
    }

}
